{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fiche d'activité 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Réaliser les imports suivants pour bénéficier de fonctions d'autoévaluation\n",
    "# - Décommenter et exécuter\n",
    "#from correction import qfact, qinv, qbin"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Rappels - compléments: les chaines de caractères en python\n",
    "### Déclaration\n",
    "\n",
    "**Rappel**: une chaîne de caractère python peut être initialisée avec une déclaration du type:  \n",
    "```python\n",
    "ma_chaine1 = 'caracteres'\n",
    "```  \n",
    "Si la chaîne contient un apostrophe, il vaut mieux utiliser une paire de doubles quotes:  \n",
    "```python\n",
    "ma_chaine2 = \"l'apostrophe n'est pas interprété comme délimiteur de chaine ici\"\n",
    "```  \n",
    "Enfin, si la chaîne occupe plusieurs lignes, on utilisera une paire de triple quotes:  \n",
    "```python\n",
    "ma_chaine3 = \"\"\"\n",
    "ligne 1\n",
    "ligne 2\n",
    "etc.\n",
    "\"\"\"\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ma_chaine1 = 'caracteres'\n",
    "type(ma_chaine1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Indexation et longueur"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On peut accéder aux différents caractères de la chaîne en utilisant une indexation comme pour les tableaux.  Une particularité de python est de permettre une indexation négative. Ainsi l'index -1 correspond au dernier caractère."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ma_chaine2 = \"l'apostrophe n'est pas interprété comme délimiteur de chaine ici\"\n",
    "print(ma_chaine2[0])\n",
    "print(ma_chaine2[-1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On obtient la longueur de la chaîne avec la fonction `len`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(len(ma_chaine2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Les chaines: objets non mutables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Les chaînes de caractères sont des objets non mutables (on dit aussi *immuables*). Décommenter et exécuter la cellule ci-après pour observer une conséquence."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#ma_chaine2[0] = 'L'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tranches "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On peut sélectionner des *tranches* dans une chaîne. Par exemple, pour récupérer les caractères situés entre les index $i$ (*inclus*) et $j$ (**exclus**) d'une chaîne `ch`, on utilise la syntaxe: `ch[i:j]`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ma_chaine2[0:12]#récupère les caractères entre les index 0 (inclus) et 12 (exclus)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Concaténation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On peut utiliser le signe '+' pour concaténer (mettre bout à bout) deux chaînes. Le résultat est une nouvelle chaîne."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_chaine = 'Les ' + ma_chaine1\n",
    "print(new_chaine)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercices"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fonction factorielle"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La traditionnelle fonction factorielle (pratiquement systématiquement présentée lorsqu'on aborde la récursivité) est définie par: $fact(n)=n!=1\\times 2\\times \\cdots \\times n$. Par ailleurs, $0!=1$.  \n",
    "Coder une fonction factorielle `fact(n)` de **manière récursive**. Coup de pouce: revoir le codage de la fonction puissance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fact(n):\n",
    "    # Supprimer l'instruction 'pass' et compléter avec votre code\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Auto évaluation - Décommenter et exécuter\n",
    "#qfact.correction(fact)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Inversion de chaîne  \n",
    "\n",
    "Soit une chaîne `ch`. On souhaite écrire une fonction `inversechaine(ch)` qui inverse tous les caractères de `ch`. Par exemple, l'appel `inversechaine('bonjour')` renvoie `'ruojnob'`. Plusieurs méthodes de programmation sont possibles. **On impose ici une méthode récursive**.    \n",
    "* Le cas de base est simple à identifier: il s'agit d'une chaîne de longueur 0 ! Lorsque ce cas se produit, il suffit de retourner la chaîne vide `''`;\n",
    "* Pour les autres cas, on s'appuie sur le constat suivant: l'inverse d'une chaîne c'est tout simplement la concaténation du dernier caractère de celle-ci avec l'inverse du reste de la chaîne.  \n",
    "\n",
    "Compléter la fonction suivante qui inverse `ch` de manière récursive. Puis tester la fonction en exécutant la cellule prévue à cet effet."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def inversechaine(ch):\n",
    "    # Supprimer l'instruction 'pass' et compléter avec votre code\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Auto évaluation - Décommenter et exécuter\n",
    "#qinv.correction(inversechaine)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Conversion binaire (encore)\n",
    "On a vu en première qu'on pouvait obtenir la conversion en binaire d'un entier naturel en réalisant les divisions successives de son quotient par 2. Exprimons cette idée de manière à faire émerger une méthode récursive.  \n",
    "On peut voir la **décomposition en binaire** d'un nombre $N$ comme la **concaténation** de la **décomposition en binaire** du quotient de $\\frac{N}{2}$, avec son reste. Le cas de base étant obtenu lorsque le nombre $N$ est nul, dans ce cas on renvoie la chaîne `'0'`.  \n",
    "\n",
    "Compléter la fonction `binaire(N)` qui prend en paramètre un entier naturel $N$ et qui renvoie une chaîne qui correspond à sa conversion en binaire. Une méthode récursive est exigée."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def binaire(N):\n",
    "    # Supprimer l'instruction 'pass' et compléter avec votre code\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Auto évaluation - Décommenter et exécuter\n",
    "#qbin.correction(binaire)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Problème classique: les tours de Hanoï"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Origine: wikipedia*\n",
    "\n",
    "Le problème mathématique des tours de Hanoï a été inventé par Édouard Lucas. Il est publié dans le tome 3 de ses Récréations mathématiques, parues à titre posthume en 1892. Il annonce que ce problème est dû à un de ses amis, N. Claus de Siam (anagramme de Lucas d'Amiens, Amiens étant sa ville de naissance), prétendument professeur au collège de Li-Sou-Stian (anagramme de Saint Louis, le lycée où Lucas enseignait).\n",
    "\n",
    "Sous le titre « Les brahmes tombent », Lucas relate que « N. Claus de Siam a vu, dans ses voyages pour la publication des écrits de l'illustre Fer-Fer-Tam-Tam, dans le grand temple de Bénarès, au-dessous du dôme qui marque le centre du monde, trois aiguilles de diamant, plantées dans une dalle d'airain, hautes d'une coudée et grosses comme le corps d'une abeille. Sur une de ces aiguilles, Dieu enfila au commencement des siècles, 64 disques d'or pur, le plus large reposant sur l'airain, et les autres, de plus en plus étroits, superposés jusqu'au sommet. C'est la tour sacrée du Brahmâ. Nuit et jour, les prêtres se succèdent sur les marches de l'autel, occupés à transporter la tour de la première aiguille sur la troisième, sans s'écarter des règles fixes que nous venons d'indiquer, et qui ont été imposées par Brahma. Quand tout sera fini, la tour et les brahmes tomberont, et ce sera la fin des mondes1 ! ».\n",
    "\n",
    "Comme indiqué ci-dessous, un jeu à 64 disques requiert un minimum de $2^{64}-1$ déplacements. En admettant qu'il faille 1 seconde pour déplacer un disque, ce qui fait 86 400 déplacements par jour, la fin du jeu aurait lieu au bout d'environ 213 000 milliards de jours, ce qui équivaut à peu près à 584,5 milliards d'années, soit 43 fois l'âge estimé de l'univers (13,7 milliards d'années selon certaines sources)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython.display import YouTubeVideo\n",
    "\n",
    "\n",
    "YouTubeVideo('U3nGNJTxYc4', width=800, height=450)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "L'objectif est de résoudre ce casse-tête en utilisant une méthode récursive. Le cas de base est obtenu lorsque le nombre $n$ de disques à déplacer est nul. Dans ce cas on retourne.  \n",
    "Le cas récursif est à faire apparaître avec la remarque suivante: pour déplacer n disques d'une tour A vers une tour C, il faut:  \n",
    "* déplacer les $n-1$ premiers disques vers une tour intermédiaire (B par exemple);\n",
    "* déplacer le plus grand disque restant vers sa destination (ici tour C);\n",
    "* déplacer les $n-1$ disques de la première étape vers C.  \n",
    "\n",
    "Proposer une solution récursive, en python, du problème des tours de Hanoï. La fonction pourrait avoir une signature du type: `hanoi(nb_disques, tour_depart, tour interm, tour_arrivee)`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def hanoi(n, start='A', inter='B', stop='C'):\n",
    "    # Supprimer l'instruction 'pass' et compléter avec votre code\n",
    "    pass "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hanoi(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
