{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Exercices\n",
    "========"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Concaténer deux listes chainées"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On reprend la structure de liste chainée vue en cours, avec des cellules."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Cell:\n",
    "    \"\"\" Une classe pour les listes chainées\"\"\"\n",
    "    \n",
    "    def __init__(self, v, s):\n",
    "        self.val = v\n",
    "        self.suiv = s"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "L'objectif de cet exercice est de coder une fonction permettant de **concaténer** (*mettre bout à bout*) deux listes."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Solution autorisant les effets de bords"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Soient deux listes chainées `l1` et `l2`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "l1 = Cell(1, Cell(3, Cell(5, None)))\n",
    "l2 = Cell(7, Cell(10, None))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Une première idée pour résoudre le problème posé est de trouver la dernière cellule de `l1` et de la chaîner à `l2`.  \n",
    "\n",
    "1. Compléter la fonction `dernier` ci-après de manière à renvoyer la dernière cellule d'une liste `l` passée en paramètre. Tester votre code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def dernier(l):\n",
    "    \"\"\" renvoie la dernière cellule de l\"\"\"\n",
    "    assert l is not None\n",
    "    cellule_courante = l\n",
    "    # A compléter avec votre code\n",
    "    #\n",
    "    return cellule_courante"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cellule de tests - A décommenter et EXECUTER !\n",
    "#assert dernier(l1).val == 5\n",
    "#assert dernier(l2).val == 10"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Coder une fonction `concat` qui prend en paramètres deux listes `l1` et `l2` et qui procède à leur concaténation. La fonction ne renvoie rien."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def concat(l1, l2):\n",
    "    \"\"\" renvoie la concaténation de l1 et l2\"\"\"\n",
    "    # Supprimer l'instruction 'pass' et compléter avec votre code.\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "concat(l1, l2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cellule de tests - A décommenter et EXECUTER\n",
    "#assert l1.val == 1\n",
    "#assert dernier(l1).val == 5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Quel(s) est(sont) le(s) problème(s) avec cette façon de procéder ? En cas de difficulté, penser à utiliser pythontutor en vue d'obtenir un résultat proche de la figure suivante.  \n",
    "![concat](img/concat1.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Structure interdisant les effets de bords non souhaités"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Afin d'éviter les problèmes identifiés précédémment, on choisit de travailler sur des copies des listes passées en paramètre. Le code d'une fonction copie est donnée ci-dessous.  \n",
    "\n",
    "Commentez ce code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def copie_rec(l):\n",
    "    \"\"\" construit récursivement une nouvelle liste qui est la copie de l,\n",
    "    et la renvoie.\"\"\"\n",
    "    \n",
    "    if l is None: \n",
    "        return None\n",
    "    else:\n",
    "        return Cell(l.val, copie_rec(l.suiv))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Commentaires"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Coder une fonction `concat2` qui prend deux listes `l1` et `l2` en paramètres et qui renvoie une **nouvelle** liste résultant de la concaténation de `l1` et `l2`.  \n",
    "\n",
    "![concat3](img/concat3.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def concat2(l1, l2):\n",
    "    # A compléter\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TESTS - A décommenter et EXECUTER\n",
    "#l1 = Cell(1, Cell(3, Cell(5, None)))\n",
    "#l2 = Cell(7, Cell(10, None))\n",
    "#l3 = concat2(l1, l2)\n",
    "#\n",
    "#assert l3.val == l1.val\n",
    "#assert dernier(l3).val == dernier(l2).val\n",
    "#assert l3 is not l1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Création d'une classe Pile avec une liste chaînée"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "L'interface de la structure de données `Pile` comporte (*rappels !*) les opérations suivantes:  \n",
    "\n",
    "* est_pile_vide;\n",
    "* empiler;\n",
    "* dépiler;\n",
    "\n",
    "On se propose de donner une réalisation possible à base de cellules, en adoptant le paradigme objet."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Cell:\n",
    "    \"\"\" Une classe pour les listes chainées\"\"\"\n",
    "    \n",
    "    def __init__(self, v, s):\n",
    "        self.val = v\n",
    "        self.suiv = s"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On crée une classe `Pile` qui sera initialisée à `None` (pile vide). Compléter les méthodes de cette classe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Pile:\n",
    "    \"\"\" Une classe pile à base de liste chaînée\"\"\"\n",
    "    \n",
    "    def __init__(self):\n",
    "        self.tete = None\n",
    "        \n",
    "    def est_pile_vide(self):\n",
    "        pass\n",
    "    \n",
    "    def empiler(self, x):\n",
    "        pass\n",
    "        \n",
    "    def depiler(self):\n",
    "        assert not self.est_pile_vide()\n",
    "        # A compléter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TESTS - A décommenter et EXECUTER\n",
    "#p = Pile()\n",
    "#p.empiler(10)\n",
    "#p.empiler(20)\n",
    "#p.empiler(5)\n",
    "#\n",
    "#assert p.tete.val == 5\n",
    "#assert p.tete.suiv.val == 20\n",
    "#\n",
    "#p.depiler()\n",
    "#assert p.tete.val == 20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
