{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Méthodes de programmation modulaire\n",
    "================================"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Avantages d'une programmation modulaire"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En première on a introduit les fonctions en réponse à la répétition de code au sein d'un programme. Cependant, la répétition des fonctions entre programmes est encore possible. Une solution est de regrouper ces fonctions et classes dans un **module**. On **décompose** ainsi une application en module(s) qui peuvent être **développés indépendamment** et **réutilisés** dans d'autres applications.  \n",
    "\n",
    "Par ailleurs, cette organisation limite ou **supprime les doublons** de code, facilitant ainsi la maintenance (*un bug est corrigé une fois*).   \n",
    "\n",
    "Enfin, la programmation modulaire permet d'une certaine façon de **cacher des détails d'implémentation**, l'interaction utilisateur-module se faisant par le biais de l'interface.\n",
    "\n",
    "Il s'agira dans cette fiche d'activité d'abord de se placer en temps qu'utilisateur de modules en se référant à leur API, puis en temps que concepteur d'un module simple."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Activité 1: traitement de données au format JSON"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Présentation rapide du format json\n",
    "Le fichier `json` est un fichier texte contenant de l'information structurée, très utilisé sur internet. Cette structuration est assurée par deux types d'éléments:  \n",
    "\n",
    "* des paires clé/valeur (qui rappelle les dictionnaires de python);\n",
    "* de listes ordonnées de valeurs.  \n",
    "\n",
    "Voir [json sur wikipedia](https://fr.wikipedia.org/wiki/JavaScript_Object_Notation). Voici un exemple de données au format `json`:  \n",
    "```json\n",
    "{\n",
    "    \"menu\": {\n",
    "        \"id\": \"file\",\n",
    "        \"value\": \"File\",\n",
    "        \"popup\": {\n",
    "            \"menuitem\": [\n",
    "                { \"value\": \"New\", \"onclick\": \"CreateNewDoc()\" },\n",
    "                { \"value\": \"Open\", \"onclick\": \"OpenDoc()\" },\n",
    "                { \"value\": \"Close\", \"onclick\": \"CloseDoc()\" }\n",
    "            ]\n",
    "        }\n",
    "    }\n",
    "}\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Le travail à réaliser"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Le [site openweathermap](https://openweathermap.org/) permet d'obtenir des informations météo dans beaucoup de villes du monde entier. Pour obtenir le temps dans une ville donnée, il faut fournir un identifiant unique ou la paire lattitude/longitude. Openweathermap propose un fichier `json` contenant ces informations. Ce fichier est disponible ici: `./json/city.list.json`. **Ne pas l'ouvrir, il a une taille de 33 Mo !!**. Sa forme est la suivante:  \n",
    "```json\n",
    "{'coord': {'lat': -21.1, 'lon': 55.299999},\n",
    " 'country': 'RE',\n",
    " 'id': 935146,\n",
    " 'name': 'Les Trois-Bassins',\n",
    " 'state': ''}\n",
    "```\n",
    "\n",
    "Le but de cette partie est d'extraire de ce fichier uniquement les informations concernant les villes de la Réunion et de les sauvegarder dans un fichier au format json. Le fichier obtenu devrait être nettement moins lourd et plus facilement utilisable (une soixantaine d'entrées au lieu de plus de 200 000 dans le fichier original).  \n",
    "\n",
    "*Rappels*  \n",
    "Pour importer un module, on peut utiliser la syntaxe `import mon_super_module`; ce qui nous obligera à préfixer chaque appel de fonction par `mon_super_module.ma_fonction()`. On peut *raccourcir* les appels en utilisant un alias lors de l'import: `import mon_super_module as msp`, on appelle alors `msp.ma_fonction()`.  \n",
    "Enfin, on peut cibler une fonction précise à importer. Dans ce cas, on utilisera la syntaxe: `from mon_super_module import ma_fonction` et l'appel se fera directement par `ma_fonction()` sans préfixe."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Prendre connaissance de l'api du module json, en ligne sur [python.org](https://docs.python.org/fr/3.8/library/json.html) ou à défaut dans une cellule de Jupyter en utilisant les fonctions `dir` et `help`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "\n",
    "\n",
    "dir(json)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#remplacer les xxxx par le nom de la méthode\n",
    "#help(json.xxxx)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Quelles sont les deux fonctions du module `json` susceptibles de nous intéresser en vue d'une ouverture et d'une écriture de fichiers json ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Réponse"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Utilisation des fonctions du module json sur le fichier `city.list.json`.  \n",
    "*On va extraire que les informations concernant les villes de la Réunion*.  \n",
    "   a) Quelle fonction doit-on utiliser pour transformer ce fichier en une structure utilisable en python ? Réaliser cette opération en complétant le code ci-dessous.   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "from pathlib import Path\n",
    "\n",
    "#Ne pas modifier ces 3 lignes--> récupère le chemin du fichier origine\n",
    "json_path = Path('.') / \"json\"\n",
    "json_path = json_path.resolve()\n",
    "f_origine = str(json_path.joinpath('city.list.json'))\n",
    "\n",
    "# Décommenter la ligne suivante\n",
    "#gros_fichier_json = open(f_origine, 'r')\n",
    "#A compléter à partir d'ici\n",
    "#structure_python = "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "b. Quelle est le type de la structure obtenue et combien d'entrées possède-t-elle? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Réponse"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "c) Afficher la 1ere entrée."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Réponse"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "d) Proposer un code permettant de sauver les entrées qui ne concernent que la Réunion dans un tableau."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Réponse\n",
    "villes_reunion = []\n",
    "#A compléter"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "e) Combien d'entrée possède ce nouveau tableau ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Réponse"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "f) Quelle fonction devra-t-on utilser pour transformer ce tableau et le sauver dans un fichier json ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Réponse"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " g) Proposer un code qui réalise la sauvergarde du tableau `villes_reunion` dans un fichier json `villes_reunion.json`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Réponse\n",
    "\n",
    "#Ne pas modifier la ligne suivante--> fournit le chemin du fichier json réduit\n",
    "f_reduit = str(json_path.joinpath(\"villes_reunion.json\"))\n",
    "\n",
    "# Décommenter\n",
    "#with open(f_reduit, \"w\") as f:\n",
    "    #à compléter ici\n",
    "               "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Activité 2: créer son module"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Comme il a été précisé en introduction, il est important de découper son code en modules afin de pouvoir le réutiliser facilement et d'en assurer une maintenance aisée.  \n",
    "\n",
    "**Qu'est-ce qu'un module?**  \n",
    "Un module est un fichier texte, d'extension `.py` (ou un fichier binaire `.pyc` qui ne sera pas abordé ici). Il peut contenir des variables, des fonctions des classes et même .. d'autres modules !.  Une bonne pratique en python consiste à placer des commentaires (*docstring*) au début:  \n",
    "\n",
    "* des fichiers, pour informer l'utilisateur des diverses fonctionnalités du module;\n",
    "* des fonctions afin d'en donner les spécifications.  \n",
    "\n",
    "*Remarque*: un module peut être exécuté comme n'importe quel autre fichier python, si bien qu'on trouve souvent à la fin une portion de code du type:  \n",
    "```python\n",
    "if __name__ == \"__main__\":\n",
    "    #instructions lorsque le module est appelé directement\n",
    "```\n",
    "\n",
    "**Où placer un module personnel?**  \n",
    "Le plus simple, mais pas forcément le plus recommandé, est de placer le module dans le même dossier que les programmes qui en feront appel."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Créer un module `pile`, correctement documenté, qui regroupe l'implémentation des opérations courantes sur une structure de donnée de type pile (voir leçon précédente).  \n",
    "2. En faire de même en créant un module `file`.  \n",
    "3. Créer une file nommée `f` puis enfiler successivement les valeurs 3, 9 et 27. Vérifier si la file f est vide. Enfin, défiler `f` 4 fois de suite. Les résultats sont-ils cohérents?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Réponse"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Pour les plus rapides: comment créer un package?**  \n",
    "Un package ou librairie en français est un dossier *spécial* dans lequel on regroupe des modules.  \n",
    "Supposons que l'on dispose de 4 modules nommés `algo`, `langage`, `machine` et `information`. On souhaite créer un package `nsi` qui regroupe ces 4 modules. La procédure est la suivante:  \n",
    "\n",
    "* créer dans le dossier où se situe le programme appelant un dossier nommé `nsi` (en ligne de commande `mkdir nsi`);\n",
    "* créer dans le dossier `nsi` un fichier vide `__init__.py` (en ligne de commande `touch nsi/__init__.py`, attention à la présence des 2 caractères 'souligné' en début et fin de nom);\n",
    "* déplacer les 4 fichiers `py` des modules dans le dossier `nsi`.  \n",
    "\n",
    "Pour utiliser une fonction `tri` du module `algo`, on utilisera la syntaxe:  \n",
    "```python\n",
    "from nsi.algo import tri\n",
    "```\n",
    "ou `from nsi.algo import *` (**déconseillé**)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Travail**:  \n",
    "1. Réaliser un package nommé `sdd` constitué des modules `pile` et `file`.\n",
    "2. Tester le bon fonctionnement des imports en indiquant les commandes utilisées dans la cellule suivante."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Réponse question 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "json  Modularite.ipynb\tsdd\r\n"
     ]
    }
   ],
   "source": [
    "!ls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "!cd sdd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/media/bruno/CL200GO/NSI/Cours/2020/nsiterminale/src/LP3_modularite\r\n"
     ]
    }
   ],
   "source": [
    "!pwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[01;34m.\u001b[00m\r\n",
      "├── \u001b[01;34mjson\u001b[00m\r\n",
      "│   ├── api_key.py\r\n",
      "│   ├── city.list.json\r\n",
      "│   ├── reunion.json\r\n",
      "│   └── villes_reunion.json\r\n",
      "├── Modularite.ipynb\r\n",
      "└── \u001b[01;34msdd\u001b[00m\r\n",
      "    └── \u001b[01;34m__pycache__\u001b[00m\r\n",
      "        ├── __init__.cpython-38.pyc\r\n",
      "        └── pile.cpython-38.pyc\r\n",
      "\r\n",
      "3 directories, 7 files\r\n"
     ]
    }
   ],
   "source": [
    "!tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
