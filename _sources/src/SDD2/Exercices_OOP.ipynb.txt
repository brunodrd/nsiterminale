{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Vocabulaire de la programmation objet - Manipuler des classes - Exercices\n",
    "============================================================="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Le vocabulaire"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Donner la définition des termes apparaissant en gras dans la consigne ci-dessous."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Il existe dans la librairie standard un module nommé `datetime` qui permet de manipuler les dates. Il implémente notamment une **classe** `date` (*voir* `help(datetime.date)` *pour une description plus complète*).  \n",
    "Des objets `date` seront **instanciés** en utilisant la syntaxe `date(annee, mois, jour)` (*voir exemple ci-dessous*).  \n",
    "Une date possède des **attributs** intéressants: `year`, `month` et `day` dont les noms sont suffisamment explicites.  \n",
    "Enfin, la date du jour peut être obtenue avec la **méthode** `today`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import date\n",
    "\n",
    "d = date(2000, 12, 1)  # le 1er décembre 2000\n",
    "print(d.day)  # le jour\n",
    "print(d.month)  # le  mois\n",
    "print(d.year)  # l'année\n",
    "print(date.today())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Une classe Personne"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Créer une classe `Personne` qui initialisera les instances avec 3 paramètres: `nom`, `prenom` et une date de naissance `dnais`. Cette classe fournit une méthode `age` qui renvoie l'age de la personne.  \n",
    "Créer un objet 'Bob' 'Leponge' né le 17 juillet 1999. Donner alors son âge."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Réponses\n",
    "# Cellule à compléter\n",
    "\n",
    "from datetime import date\n",
    "\n",
    "\n",
    "class Personne:\n",
    "    \"\"\"Informations personnelles sur une personne\"\"\"\n",
    "    \n",
    "    def __init__(self, nom, prenom, dnais):\n",
    "        pass\n",
    "        # à compléter - SUPPRIMER la ligne contenant l'instruction 'pass' !!\n",
    "    \n",
    "    def age(self):\n",
    "        d = date.today()\n",
    "        # à compléter"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Une classe Article"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Compléter la cellule suivante dans laquelle on devra créer une classe `Article` qui **initialisera** les objets instanciés avec les paramètres `ref`, `prixHT`, et `tva`. Cette classe implémentera les méthodes:  \n",
    "\n",
    "* `prixTTC` qui renvoie le prix TTC calculé de la manière suivante: `prixHT + prixHT*tva/100`;\n",
    "* `affiche` qui affiche toutes la référence de l'article, son prix HT et son prixTTC.  \n",
    "\n",
    "Tester (*avec une TVA à 20% par exemple*)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Réponses\n",
    "# Cellule à compléter\n",
    "\n",
    "class Article:\n",
    "    \"\"\"Une classe pour manipuler les caractéristiques des articles\"\"\"\n",
    "    \n",
    "    #def __init__(...):\n",
    "        \n",
    "    #def prixTTC(...):\n",
    "    \n",
    "    #def affiche(...):\n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Compte bancaire"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On définit compte bancaire par la donnée:  \n",
    "\n",
    "* d'un nom et d'un prénom\n",
    "* d'un numéro de compte\n",
    "* d'un solde initial de 50 (la banque offre 50€ de bienvenue pour l'ouverture d'un compte)\n",
    "\n",
    "Par ailleurs, le titulaire peut débiter son compte, le créditer ou le consulter (*c-à-d obtenir la valeur du solde*). Attention, on ne peut débiter son compte que si son solde le permet !  \n",
    "\n",
    "Ecrire et tester une classe `CompteBancaire` qui répond à ce cahier des charges."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
