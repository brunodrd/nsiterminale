{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "LANGAGE SQL\n",
    "============"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Le langage"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "SQL ou *Structured Query Language* est un langage standardisé de dialogue avec une base de données. C'est un langage déclaratif impératif; on décrit le *quoi* pas le *comment*.  \n",
    "Conformément au programme, on va se limiter aux instructions d'**interrogation** et de **mise à jour**. En d'autres termes, il s'agira:  \n",
    "\n",
    "* de demander des informations;\n",
    "* d'extraire une partie des informations suivant des critères précis;\n",
    "* de modifier des données (insertion ou suppression)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Les requêtes d'interrogation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Une requête qui permet d'obtenir tout ou une partie des attributs d'une relation (*projection en algèbre relationnelle*) a une syntaxe du type:  \n",
    "\n",
    "```\n",
    "SELECT attribut(s) FROM table(s) \n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Application 1**  \n",
    "\n",
    "1. Donner le schéma de la BDD `Livres`.\n",
    "2. Ecrire et tester la requête SQL qui permet d'obtenir tous les titres de la relation `livre`. Combien de titres sont présents?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On peut rajouter une condition de restriction sur les informations extraites en utilisant la clause `WHERE`. La syntaxe devient alors:  \n",
    "\n",
    "```\n",
    "SELECT attribut(s) FROM table(s) WHERE condition(s);\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Application 2.1**  \n",
    "\n",
    "En utilisant la relation `livre`, écrire et tester la requête SQL permettant d'obtenir toutes informations sur les livres publiés par l'éditeur `Dargaud`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La condition peut être exprimée avec les opérateur de comparaisons habituels mais aussi avec des opérateurs de comparaison de texte comme `LIKE`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Application 2.2**  \n",
    "\n",
    "Que produit la requête:  \n",
    "\n",
    "```\n",
    "SELECT titre FROM livre WHERE titre LIKE '%Astérix%'\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Si on désire obtenir les résultats dans un ordre particulier, on pourra utiliser la clause `ORDER BY`. La syntaxe est:  \n",
    "\n",
    "```\n",
    "SELECT attribut(s) FROM table(s) WHERE condition(s) ORDER BY attribut;\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Application 3**  \n",
    "\n",
    "Ecrire et tester la requête SQL permettant d'obtenir tous les titres de livres publiés après 1990, classés par titre (on dit aussi *ordre lexicographique*)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Si on veut éviter les doublons, on ajoute le mot clé `DISTINCT` à la clause `SELECT`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Application 4**  \n",
    "\n",
    "Comparer les sorties des deux requêtes suivantes:  \n",
    "\n",
    "* `SELECT annee FROM livre;`\n",
    "* `SELECT DISTINCT annee FROM livre;`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A partir de la table `emprunt`, on peut obtenir la liste de tous les livres empruntés avec la requête simple `SELECT * FROM emprunt`. Le résultat n'est très exploitable. Il serait intéressant d'avoir aussi les informations sur les livres à partir de l'isbn de la table `livre`. Cette opération de *fusion* des tables `emprunt` et `livre` est appelée **jointure**.  La syntaxe générale d'une jointure en SQL est:  \n",
    "\n",
    "```\n",
    "SELECT attribut(s) FROM table JOIN table_aux ON condition(s)\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Application 5**  \n",
    "\n",
    "* Tester la jointure des tables `emprunt` et `livre` avec la requête suivante: `SELECT * FROM emprunt JOIN livre ON emprunt.isbn=livre.isbn`.\n",
    "* Que réalise la requête ci-dessous? Tester.  \n",
    "```\n",
    "SELECT livre.titre, emprunt.retour\n",
    "FROM emprunt JOIN livre ON emprunt.isbn=livre.isbn\n",
    "WHERE emprunt.retour < '2020-02-01';\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Les requêtes de mise à jour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
