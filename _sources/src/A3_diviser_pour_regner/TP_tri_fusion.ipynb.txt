{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Introduction au tri fusion: quelques opérations sur les listes chaînées\n",
    "========================================================"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Quelques fonctions ou portions de code utiles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Cell:\n",
    "    \"\"\" Classe cellule pour liste chainée\"\"\"\n",
    "    \n",
    "    def __init__(self, v, s):\n",
    "        self.val = v\n",
    "        self.suiv = s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TESTS a voir éventuellement sur pythontutor\n",
    "lst1 = Cell(10, Cell(5, Cell(-4, Cell(0, Cell(1, None)))))\n",
    "lst2 = Cell(2, lst1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def taille(l):\n",
    "    return 1 if l.suiv is None else 1 + taille(l.suiv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "taille(lst2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def affiche_list(l):\n",
    "    while l is not None:\n",
    "        print(l.val, ' --> ', end='')\n",
    "        l = l.suiv\n",
    "    print('None')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def copie(l):\n",
    "    \"\"\"\n",
    "    renvoie une liste chaînée, copie de l\n",
    "    \"\"\"\n",
    "    return None if l is None else Cell(l.val, copie(l.suiv))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Couper une liste en deux"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Il s'agit de séparer les éléments d'une liste en deux listes de même taille (*à un élément près si la taille de la liste originale est impaire*)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Proposition 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Idée*:  \n",
    "\n",
    "* trouver la taille $n$ de la liste;  \n",
    "* mettre les $\\left\\lfloor \\dfrac{n}{2}\\right\\rfloor$ premiers dans la première liste et les autres dans la seconde liste."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def coupe_v1(l):\n",
    "    \"\"\"\n",
    "    coupe l en deux parties (égales si la longueur de l est paire).\n",
    "    renvoie deux listes chainées l1 et l2\n",
    "    \"\"\"\n",
    "    # A compléter\n",
    "    l1, l2 = None, None\n",
    "    n = taille(l) # il faut la taille de la liste\n",
    "    cpt = 0\n",
    "    l_tempo = l\n",
    "    while l_tempo is not None: # tant qu'on n'est pas en fin de liste\n",
    "        if cpt < n // 2:\n",
    "            l1 = Cell(l_tempo.val, l1)\n",
    "        else:\n",
    "            l2 = Cell(l_tempo.val, l2)\n",
    "        l_tempo = l_tempo.suiv\n",
    "        cpt = cpt + 1\n",
    "    return l1, l2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2  --> 10  --> 5  --> -4  --> 0  --> 1  --> None\n",
      "5  --> 10  --> 2  --> None\n",
      "1  --> 0  --> -4  --> None\n"
     ]
    }
   ],
   "source": [
    "# TESTS\n",
    "l1, l2 = coupe_v1(lst2)\n",
    "affiche_list(lst2)\n",
    "affiche_list(l1)\n",
    "affiche_list(l2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Proposition 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Idée*:  \n",
    "\n",
    "* prendre deux éléments de la liste (si possible);\n",
    "* disposer un élément dans chaque liste `l1` et `l2`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "def coupe_v2(l):\n",
    "    \"\"\"\n",
    "    coupe l en deux parties (égales si la longueur de l est paire).\n",
    "    renvoie deux listes chainées l1 et l2\n",
    "    \"\"\"\n",
    "    # A compléter\n",
    "    l1, l2 = None, None\n",
    "    # ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TESTS\n",
    "#l1, l2 = coupe_v2(lst1)\n",
    "#affiche_list(lst1)\n",
    "#affiche_list(l1)\n",
    "#affiche_list(l2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Proposition 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Idée*:  \n",
    "\n",
    "On parcours la liste originale et on place la valeur une fois dans `l1`, une fois dans `l2`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def coupe_v3(l):\n",
    "    pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fusionner deux listes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On considère deux listes chaînées `l1` et `l2` que l'**on suppose triées par ordre croissant**.  On demande d'écrire une fonction `fusion` qui prend en paramètre `l1` et `l2` et qui renvoie une liste chaînée contenant tous les éléments de `l1` et `l2` triés par ordre croissant. La récursivité est bienvenue !"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fusion(l1, l2):\n",
    "    \"\"\"\n",
    "    renvoie la fusion ordonée de deux listes triées;\n",
    "    l1, l2: listes chaînées\n",
    "    \"\"\"\n",
    "    # Les cas de base\n",
    "    if l1 is None: return l2\n",
    "    if l2 is None: return l1\n",
    "    # Cas récursif\n",
    "    if l1.val < l2.val:\n",
    "        return Cell(l1.val, fusion(l1.suiv, l2))\n",
    "    else:\n",
    "        return Cell(l2.val, fusion(l1, l2.suiv))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3  --> 8  --> 13  --> 17  --> None\n",
      "-2  --> 1  --> 7  --> 11  --> None\n",
      "-2  --> 1  --> 3  --> 7  --> 8  --> 11  --> 13  --> 17  --> None\n"
     ]
    }
   ],
   "source": [
    "# TESTS\n",
    "x = Cell(3, Cell(8, Cell(13, Cell(17, None))))\n",
    "y = Cell(-2, Cell(1, Cell(7, Cell(11, None))))\n",
    "affiche_list(x)\n",
    "affiche_list(y)\n",
    "liste_finale = fusion(x, y)\n",
    "affiche_list(liste_finale)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Le tri fusion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En utilisant les résultats précédents, écrire une fonction `tri_fusion` qui prend en paramètre une liste chaînée et qui renvoie une nouvelle liste chaînée triée."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
