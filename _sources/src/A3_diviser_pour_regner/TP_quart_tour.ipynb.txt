{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "TP QUART DE TOUR\n",
    "================="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Le problème à résoudre"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On souhaite effectuer la rotation d'un quart de tour (ou 90°) d'une image *carrée*, par exemple de 512 pixels sur 512 pixels.  \n",
    "![r2d2](img/vignette_r2d2.png)![r2d2_tourne](img/vignette_R2D2_90.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Méthode de résolution"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On utilise l'approche **diviser pour régner**. On divise l'image en 4 puis on effectue une permutation circulaire des quatre quadrants obtenus. Ensuite on applique récursivement le même processus sur chaque quadrant jusqu'à obtenir ... 1 pixel.  \n",
    "![process](img/quart_r2d2.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Modéliser l'image comme un tableau de pixel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def trace(func):\n",
    "    def wrapper(*args):\n",
    "        print(' ' * wrapper.space, end='')\n",
    "        print('{} <− {}'.format(func.__name__, str(args)))\n",
    "        wrapper.space += 1\n",
    "        val = func(*args)\n",
    "        wrapper.space -= 1\n",
    "        print(' ' * wrapper.space, end='')\n",
    "        print('{} −> {}'.format(func.__name__, str(val)))\n",
    "        return val\n",
    "    wrapper.space = 0\n",
    "    return wrapper"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "from PIL import Image\n",
    "\n",
    "\n",
    "im = Image.open(\"./coursterminale/src/A3_diviser_pour_regner/img/R2D2.png\")\n",
    "largeur, hauteur = im.size\n",
    "pix = im.load()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "512"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "largeur"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`pix` est une instance de la classe `PixelAccess` du module `Image` de la librairie `PIL`. Cette variable peut être vue comme un **tableau de pixels**. Ces derniers étant des n-uplets des composantes Rouge, Vert et Bleu. Pour modifier un pixel aux coordonées `x, y` on effectue l'affectation:  \n",
    "`pix[x, y] = c` où `c` est un triplet représentant une couleur."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "im.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Résolution"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On suppose que l'image est carrée `(t x t) `où `t` est sa taille et correspond à une puissance de 2. On va récursivement:  \n",
    "\n",
    "* découper l'image en 4 et effectuer une rotation de 90° de chacun des 4 morceaux;\n",
    "* déplacer chacun des morceaux vers leur position finale (voir schéma ci-dessous)\n",
    "\n",
    "![schéma](img/schema_1.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Compléter la fonction `rotation_aux`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def rotation_aux(px, l, h, t):\n",
    "    # Cas de base\n",
    "    if t == 1:\n",
    "        return\n",
    "    # Cas récursif\n",
    "    # Découpe\n",
    "    t = t // 2\n",
    "    # A décommenter et compléter\n",
    "    \"\"\"\n",
    "    rotation_aux(px, ..., ..., ....)\n",
    "    rotation_aux(px, ...., ..., ...)\n",
    "    rotation_aux(px, ..., ...., ....)\n",
    "    rotation_aux(px, ..., ...., ...) \n",
    "    \"\"\"\n",
    "    # Déplacement des morceaux\n",
    "    # A décommenter et compléter\n",
    "    \"\"\"\n",
    "    for x in range(l, l+t):\n",
    "        for y in range(h, h+t):\n",
    "        ...\n",
    "    \"\"\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Compléter la fonction `rotation`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "def rotation(px, taille):\n",
    "    # A compléter\n",
    "    pass"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "337.594px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
